<?xml version="1.0" encoding="UTF-8"?>
<TestSuite>
  <suiteName>Conditional evaluations transform</suiteName>
  <description>
      <p>Tests of conditional evaluation</p>
      <author>Efraim Feinstein</author>
      <copyright>Copyright 2014 Efraim Feinstein
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <namespace prefix="jf">http://jewishliturgy.org/ns/jlptei/flat/1.0</namespace>
  <imports>
    import module namespace cond="http://jewishliturgy.org/transform/conditionals"
      at "xmldb:exist:///db/apps/opensiddur-server/transforms/conditionals.xqm";
  </imports>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <functions>
    declare function local:wrap-result(
        $str as xs:string*
        ) as element() {
            element results {
              for $s in $str
              return
                  element result { $s }
            }
    };
  </functions>
    <TestSet>
        <testName>tei:fs and tei:f</testName>
        <test>
            <task>condition checking 1 true value</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                      cond:evaluate(
                          &lt;tei:fs type="FS"&gt;
                              &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                          &lt;/tei:fs&gt;, 
                          $settings
                      ) 
                    )
            </code>
            <expected desc="one yes result">
            <results>
               <result>YES</result>
            </results>
         </expected>
        </test>
        <test>
            <task>condition checking 1 false value</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result(
                      cond:evaluate(
                          &lt;tei:fs type="FS"&gt;
                              &lt;tei:f name="ONE"&gt;&lt;j:no/&gt;&lt;/tei:f&gt;
                          &lt;/tei:fs&gt;, 
                          $settings
                      ) 
                    )
            </code>
            <expected desc="one no result">
            <results>
               <result>NO</result>
            </results>
         </expected>
        </test>
        <test>
            <task>condition checking 1 maybe value</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;MAYBE&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result(
                      cond:evaluate(
                          &lt;tei:fs type="FS"&gt;
                              &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                          &lt;/tei:fs&gt;, 
                          $settings
                      ) 
                    )
            </code>
            <expected desc="one maybe result">
            <results>
               <result>MAYBE</result>
            </results>
         </expected>
        </test>
        <test>
            <task>condition checking 1 true and 1 false value</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;TWO" : &lt;tei:string&gt;NO&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result(
                      cond:evaluate(
                          &lt;tei:fs type="FS"&gt;
                              &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                              &lt;tei:f name="TWO"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                          &lt;/tei:fs&gt;, 
                          $settings
                      ) 
                    )
            </code>
            <expected desc="two results">
            <results>
               <result>YES</result>
               <result>NO</result>
            </results>
         </expected>
        </test>
    </TestSet>
    <TestSet>
        <testName>j:all</testName>
        <test>
            <task>all are YES</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;TWO" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;THREE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:all&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="TWO"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="THREE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:all&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="yes result">
            <results>
               <result>YES</result>
            </results>
         </expected>
        </test>
        <test>
            <task>one NO</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;TWO" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;THREE" : &lt;tei:string&gt;NO&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:all&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="TWO"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="THREE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:all&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="no result">
            <results>
               <result>NO</result>
            </results>
         </expected>
        </test>
        <test>
            <task>one MAYBE</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;TWO" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;THREE" : &lt;tei:string&gt;MAYBE&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:all&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="TWO"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="THREE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:all&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="maybe result">
            <results>
               <result>MAYBE</result>
            </results>
         </expected>
        </test>
    </TestSet>
    <TestSet>
        <testName>j:any</testName>
        <test>
            <task>all are YES</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;TWO" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;THREE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:any&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="TWO"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="THREE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:any&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="yes result">
            <results>
               <result>YES</result>
            </results>
         </expected>
        </test>
        <test>
            <task>one YES</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;TWO" : &lt;tei:string&gt;NO&lt;/tei:string&gt;,
                        "FS-&gt;THREE" : &lt;tei:string&gt;NO&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:any&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="TWO"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="THREE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:any&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="yes result">
            <results>
               <result>YES</result>
            </results>
         </expected>
        </test>
        <test>
            <task>one MAYBE</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;MAYBE&lt;/tei:string&gt;,
                        "FS-&gt;TWO" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;THREE" : &lt;tei:string&gt;NO&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:any&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="TWO"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="THREE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:any&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="maybe result">
            <results>
               <result>MAYBE</result>
            </results>
         </expected>
        </test>
    </TestSet>
    <TestSet>
        <testName>j:oneOf</testName>
        <test>
            <task>all are YES</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;TWO" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;THREE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:oneOf&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="TWO"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="THREE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:oneOf&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="no result">
            <results>
               <result>NO</result>
            </results>
         </expected>
        </test>
        <test>
            <task>all are NO</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;NO&lt;/tei:string&gt;,
                        "FS-&gt;TWO" : &lt;tei:string&gt;NO&lt;/tei:string&gt;,
                        "FS-&gt;THREE" : &lt;tei:string&gt;NO&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:oneOf&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="TWO"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="THREE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:oneOf&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="no result">
            <results>
               <result>NO</result>
            </results>
         </expected>
        </test>
        <test>
            <task>one YES</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;TWO" : &lt;tei:string&gt;NO&lt;/tei:string&gt;,
                        "FS-&gt;THREE" : &lt;tei:string&gt;NO&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:oneOf&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="TWO"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="THREE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:oneOf&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="yes result">
            <results>
               <result>YES</result>
            </results>
         </expected>
        </test>
        <test>
            <task>one MAYBE</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;MAYBE&lt;/tei:string&gt;,
                        "FS-&gt;TWO" : &lt;tei:string&gt;NO&lt;/tei:string&gt;,
                        "FS-&gt;THREE" : &lt;tei:string&gt;NO&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:oneOf&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="TWO"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="THREE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:oneOf&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="maybe result">
            <results>
               <result>MAYBE</result>
            </results>
         </expected>
        </test>
        <test>
            <task>one YES, one MAYBE</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;MAYBE&lt;/tei:string&gt;,
                        "FS-&gt;TWO" : &lt;tei:string&gt;YES&lt;/tei:string&gt;,
                        "FS-&gt;THREE" : &lt;tei:string&gt;NO&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:oneOf&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="TWO"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                    &lt;tei:f name="THREE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:oneOf&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="no result">
            <results>
               <result>NO</result>
            </results>
         </expected>
        </test>
    </TestSet>
    <TestSet>
        <testName>j:not</testName>
        <test>
            <task>not YES</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;YES&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:not&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:not&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="no result">
            <results>
               <result>NO</result>
            </results>
         </expected>
        </test>
        <test>
            <task>not NO</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;NO&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:not&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:not&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="yes result">
            <results>
               <result>YES</result>
            </results>
         </expected>
        </test>
        <test>
            <task>not MAYBE</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "FS-&gt;ONE" : &lt;tei:string&gt;MAYBE&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;j:not&gt;
                                &lt;tei:fs type="FS"&gt;
                                    &lt;tei:f name="ONE"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                                &lt;/tei:fs&gt;
                            &lt;/j:not&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="maybe result">
            <results>
               <result>MAYBE</result>
            </results>
         </expected>
        </test>
    </TestSet>
    <TestSet>
        <testName>Default values</testName>
        <setup>
            <copy source="/db/apps/opensiddur-tests/tests/transforms" name="conditional1.xml"
               destination="/db/data/conditionals"/> 
        </setup>
        <tearDown>
            <remove-document collection="/db/data/conditionals" name="conditional1.xml"/>
        </tearDown>
        <test>
            <task>Literal default value</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;tei:fs type="test:FS"&gt;
                                &lt;tei:f name="DEFAULT_YES"&gt;&lt;tei:default/&gt;&lt;/tei:f&gt;
                            &lt;/tei:fs&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="default value yes">
            <results>
               <result>YES</result>
            </results>
         </expected>
        </test>
        <test>
            <task>Conditional default value, condition evaluates true</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "test:FS-&gt;CONTROL" : &lt;tei:string&gt;NO&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;tei:fs type="test:FS"&gt;
                                &lt;tei:f name="DEFAULT_IF"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                            &lt;/tei:fs&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="default value yes">
            <results>
               <result>YES</result>
            </results>
         </expected>
        </test>
        <test>
            <task>Conditional default value, condition evaluates false</task>
            <code>
                let $settings := map {
                    "combine:settings" : map {
                        "test:FS-&gt;CONTROL" : &lt;tei:string&gt;YES&lt;/tei:string&gt;
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            &lt;tei:fs type="test:FS"&gt;
                                &lt;tei:f name="DEFAULT_IF"&gt;&lt;j:yes/&gt;&lt;/tei:f&gt;
                            &lt;/tei:fs&gt;,
                            $settings
                        )
                    )
            </code>
            <expected desc="default value no">
            <results>
               <result>NO</result>
            </results>
         </expected>
        </test>
    </TestSet>
</TestSuite>
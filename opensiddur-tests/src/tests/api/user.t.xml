<?xml version="1.0" encoding="UTF-8"?>
<TestSuite>
  <suiteName>User API</suiteName>
  <description>
      <p>Test the user and contributor profile API</p>
      <author>Efraim Feinstein</author>
      <copyright>Copyright 2012-2014 Efraim Feinstein,
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <setup>
      <store collection="/db/data/user" name="testuser.xml">
         <j:contributor xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0">
            <tei:idno xmlns:tei="http://www.tei-c.org/ns/1.0">testuser</tei:idno>
            <tei:name xmlns:tei="http://www.tei-c.org/ns/1.0">Spike Tester</tei:name>
         </j:contributor>
      </store>
      <store collection="/db/data/user" name="notauser.xml">
         <j:contributor xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0">
            <tei:idno xmlns:tei="http://www.tei-c.org/ns/1.0">notauser</tei:idno>
            <tei:name xmlns:tei="http://www.tei-c.org/ns/1.0">Not a spike user</tei:name>
         </j:contributor>
      </store>
      <store collection="/db/data/user" name="testuser2.xml">
         <j:contributor xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0">
            <tei:idno xmlns:tei="http://www.tei-c.org/ns/1.0">testuser2</tei:idno>
         </j:contributor>
      </store>
      <code>
      let $testuser := xs:anyURI("/db/data/user/testuser.xml")
      let $testuser2 := xs:anyURI("/db/data/user/testuser2.xml")
      let $notauser := xs:anyURI("/db/data/user/notauser.xml")
      return
      system:as-user("admin", $magic:password, (
        sm:chown($testuser, "testuser"),
        sm:chgrp($testuser, "testuser"),
        sm:chmod($testuser, "rw-r--r--"),
        sm:chown($notauser, "testuser2"),
        sm:chgrp($notauser, "everyone"),
        sm:chmod($notauser, "rw-rw-r--"),
        sm:chown($testuser2, "testuser2"),
        sm:chgrp($testuser2, "everyone"), (: there is no testuser2 group:)
        sm:chmod($testuser2, "rw-r--r--")
      ))
    </code>
      <store collection="/db/data/user" name="TestProfile.xml">
         <j:contributor xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0">
            <tei:idno xmlns:tei="http://www.tei-c.org/ns/1.0">TestProfile</tei:idno>
            <tei:name xmlns:tei="http://www.tei-c.org/ns/1.0">A Tester</tei:name>
         </j:contributor>
      </store>
  </setup>
  <tearDown>
      <remove-document collection="/db/data/user" name="TestProfile.xml"/>
      <remove-document collection="/db/data/user" name="testuser.xml"/>
      <remove-document collection="/db/data/user" name="not_a_real_contributors_profile.xml"/>
      <remove-document collection="/db/data/user" name="notauser.xml"/>
      <code>
      system:as-user("admin", $magic:password, 
        xmldb:remove("/db/data/user", "testuser2.xml"))
    </code>
  </tearDown>
  <namespace prefix="html">http://www.w3.org/1999/xhtml</namespace>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <namespace prefix="jx">http://jewishliturgy.org/ns/jlp-processor</namespace>
  <namespace prefix="http">http://expath.org/ns/http-client</namespace>
  <imports>
    import module namespace ridx="http://jewishliturgy.org/modules/refindex"
      at "xmldb:exist:///db/apps/opensiddur-server/modules/refindex.xqm";
    import module namespace user="http://jewishliturgy.org/api/user"
      at "xmldb:exist:///db/apps/opensiddur-server/api/user.xqm";
    import module namespace magic="http://jewishliturgy.org/magic"
      at "xmldb:exist:///db/apps/opensiddur-server/magic/magic.xqm";
  </imports>
  <TestSet>
      <testName>user:list()</testName>
      <test>
         <task>List all users</task>
         <code>
      user:list("", 1, 100)
      </code> 
         <class href="common.t.incl.xml#SearchResults"/>
         <xpath desc="returns at least 4 results">count(.//html:*[@class="result"])&gt;=4</xpath>
         <xpath desc="groups view is presented as an alternate">
        exists(.//html:li[@class="result"]/html:a[@class="document"]) and (
        every $d in .//html:li[@class="result"]/html:a[@class="document"]
        satisfies exists($d/following-sibling::html:a[@class="alt"][@property="groups"])
        )</xpath>
         <xpath desc="access view is presented as an alternate">
        exists(.//html:li[@class="result"]/html:a[@class="document"]) and (
        every $d in .//html:li[@class="result"]/html:a[@class="document"]
        satisfies exists($d/following-sibling::html:a[@class="alt"][@property="access"])
        )</xpath>
      </test>
      <test>
         <task>Query all users</task>
         <code>
      user:list("spike", 1, 100)
      </code> 
         <class href="common.t.incl.xml#SearchResults"/>
         <xpath desc="returns at least 2 results">count(.//html:*[@class="result"])&gt;=2</xpath>
      </test>
  </TestSet>
  <TestSet>
      <testName>user:get(): authenticated</testName>
      <test>
         <task>Get existing user profile</task>
         <code>
      user:get("testuser2")
      </code> 
         <!-- a document-node() is returned... -->
      <expected desc="profile is returned" xpath="*">
            <j:contributor xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0">
               <tei:idno xmlns:tei="http://www.tei-c.org/ns/1.0">testuser2</tei:idno>
            </j:contributor>
         </expected>
      </test>
      <test>
         <task>Get non-existing user profile</task>
         <code>
      user:get("doesnotexist")
      </code> 
         <class href="common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>user:get(): unauthenticated</testName>
      <test>
         <task>Get existing user profile</task>
         <code>
      </code> 
      </test>
      <test>
         <task>Get non-existing user profile</task>
         <code>
      user:get("doesnotexist")
      </code> 
         <class href="common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>user:post-xml(): unauthenticated</testName>
      <asUser/>
      <password/>
      <tearDown>
      <!-- remove user, group, and profile -->
      <code>
      system:as-user("admin", $magic:password,(
        if (sm:group-exists("testuser3"))
        then 
          try {
            sm:remove-group("testuser3")
          } 
          catch * { 
            util:log-system-out((
    $err:module, ":", $err:line-number, ":", 
    $err:column-number, ","[$err:code], $err:code, ":"[$err:value], $err:value, ": "[$err:description], 
    $err:description,
    ";")) 
          }
        else (),
        if (sm:user-exists("testuser3"))
        then sm:remove-account("testuser3")
        else (),
        if (doc-available("/db/data/user/testuser3.xml"))
        then xmldb:remove("/db/data/user", "testuser3.xml")
        else ()
      ))
      </code>
      </tearDown>
      <test>
         <task>Create a new user</task>
         <code>
      user:post-xml(document {
        &lt;new&gt;
          &lt;user&gt;testuser3&lt;/user&gt;
          &lt;password&gt;testuser3&lt;/password&gt;
        &lt;/new&gt;
      })
      </code> 
         <class href="common.t.incl.xml#Created"/>
         <xpath desc="user has been created">system:as-user("admin", $magic:password, sm:user-exists("testuser3"))</xpath>
         <xpath desc="group has been created">system:as-user("admin", $magic:password, sm:group-exists("testuser3"))</xpath>
         <xpath desc="user is a manager of its own group">system:as-user("admin", $magic:password, sm:get-group-managers("testuser3")="testuser3")</xpath>
         <xpath desc="profile has been created">doc-available("/db/data/user/testuser3.xml")</xpath>
         <xpath desc="profile contains an idno equal to the user name">doc("/db/data/user/testuser3.xml")/j:contributor/tei:idno="testuser3"</xpath>
         <xpath desc="user profile permissions are correct">
      doc-available("/db/data/user/testuser3.xml") and
      sm:get-permissions(xs:anyURI("/db/data/user/testuser3.xml"))/*/(
        @owner = "testuser3" and @group="testuser3" and @mode="rw-r--r--"
      )</xpath>
      </test>
      <test>
         <task>Create a new user with blank username</task>
         <code>
      user:post-xml(document {
        &lt;new&gt;
          &lt;password&gt;testuser3&lt;/password&gt;
        &lt;/new&gt;
      })
      </code>
         <class href="common.t.incl.xml#BadRequest"/> 
      </test>
      <test>
         <task>Create a new user with blank password</task>
         <code>
      user:post-xml(document {
        &lt;new&gt;
          &lt;user&gt;testuser3&lt;/user&gt;
          &lt;password/&gt;
        &lt;/new&gt;
      })
      </code>
         <class href="common.t.incl.xml#BadRequest"/> 
      </test>
      <test>
         <task>Create a new user with a username containing an illegal character</task>
         <code>
      user:post-xml(document {
        &lt;new&gt;
          &lt;user&gt;test,user3&lt;/user&gt;
          &lt;password&gt;testuser3&lt;/password&gt;
        &lt;/new&gt;
      })
      </code>
         <class href="common.t.incl.xml#BadRequest"/> 
      </test>
      <test>
         <task>Create a new user when the user already exists</task>
         <code>
      user:post-xml(document {
        &lt;new&gt;
          &lt;user&gt;testuser&lt;/user&gt;
          &lt;password&gt;xxxxxx&lt;/password&gt;
        &lt;/new&gt;
      })
      </code>
         <class href="common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>Create a new user when no user exists, but a profile exists</task>
         <code>
      user:post-xml(document {
        &lt;new&gt;
          &lt;user&gt;TestProfile&lt;/user&gt;
          &lt;password&gt;xxxxxx&lt;/password&gt;
        &lt;/new&gt;
      })
      </code> 
         <class href="common.t.incl.xml#Forbidden"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>user:post-xml(): authenticated</testName>
      <tearDown>
      <!-- reset testuser2's password -->
      <code>
      system:as-user("admin", $magic:password, 
        sm:passwd("testuser2", "testuser2")
      )
      </code>
      </tearDown>
      <test>
         <task>Change a password</task>
         <code>
      system:as-user("testuser2", "testuser2", 
        user:post-xml(document {
          &lt;change&gt;
            &lt;user&gt;testuser2&lt;/user&gt;
            &lt;password&gt;testusernewpassword&lt;/password&gt;
          &lt;/change&gt;
        })
      )
      </code> 
         <class href="common.t.incl.xml#NoData"/>
         <xpath desc="password is changed">xmldb:authenticate("/db", "testuser2", "testusernewpassword")</xpath>
      </test>
      <test>
         <task>Change password of another user</task>
         <code>
      user:post-xml(document {
        &lt;change&gt;
          &lt;user&gt;testuser2&lt;/user&gt;
          &lt;password&gt;testuser&lt;/password&gt;
        &lt;/change&gt;
      })
      </code>
         <class href="common.t.incl.xml#Forbidden"/> 
      </test>
      <test>
         <task>Missing username</task>
         <code>
      user:post-xml(document {
        &lt;change&gt;
          &lt;password&gt;testuser&lt;/password&gt;
        &lt;/change&gt;
      })
      </code>
         <class href="common.t.incl.xml#BadRequest"/>
      </test>
      <test>
         <task>Missing password</task>
         <code>
      user:post-xml(document {
        &lt;change&gt;
          &lt;user&gt;testuser&lt;/user&gt;
        &lt;/change&gt;
      })
      </code>
         <class href="common.t.incl.xml#BadRequest"/>
      </test>
      <test>
         <task>Attempt to change a username</task>
         <code>
      user:post-xml(document {
        &lt;change&gt;
          &lt;user&gt;testusernoexist&lt;/user&gt;
          &lt;password&gt;testuser&lt;/password&gt;
        &lt;/change&gt;
      })
      </code>
         <!-- forbidden because it's also an attempt to change 
      the password of another user
       -->
      <class href="common.t.incl.xml#Forbidden"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>user:put() authenticated</testName>
      <test>
         <task>Edit your own profile</task>
         <code>
      user:put("testuser", document {
        &lt;j:contributor&gt;
          &lt;tei:idno&gt;testuser&lt;/tei:idno&gt;
          &lt;tei:name&gt;Test User&lt;/tei:name&gt;
        &lt;/j:contributor&gt;
      })
      </code>
         <class href="common.t.incl.xml#NoData"/>
         <xpath desc="profile is edited">doc("/db/data/user/testuser.xml")/j:contributor/tei:name="Test User"</xpath>
      </test>
      <test>
         <task>Edit your own profile, changing tei:idno</task>
         <code>
      user:put("testuser", document {
        &lt;j:contributor&gt;
          &lt;tei:idno&gt;testuserdifferent&lt;/tei:idno&gt;
          &lt;tei:name&gt;Test User&lt;/tei:name&gt;
        &lt;/j:contributor&gt;
      })
      </code>
         <class href="common.t.incl.xml#BadRequest"/>
      </test>
      <test>
         <task>Edit your own profile, with invalid contributor data</task>
         <code>
      user:put("testuser", document {
        &lt;j:contributor&gt;
          &lt;tei:idno&gt;testuser&lt;/tei:idno&gt;
          &lt;tei:not-allowed/&gt;
        &lt;/j:contributor&gt;
      })
      </code>
         <class href="common.t.incl.xml#BadRequest"/>
      </test>
      <test>
         <task>Edit another user's profile</task>
         <code>
      user:put("testuser2", document {
        &lt;j:contributor&gt;
          &lt;tei:idno&gt;testuser2&lt;/tei:idno&gt;
          &lt;tei:name&gt;Test User&lt;/tei:name&gt;
        &lt;/j:contributor&gt;
      })
      </code>
         <class href="common.t.incl.xml#Forbidden"/>
      </test>
      <test>
         <task>Create a non-user profile</task>
         <code>
      user:put("not_a_real_contributors_profile", document {
        &lt;j:contributor&gt;
          &lt;tei:idno&gt;not_a_real_contributors_profile&lt;/tei:idno&gt;
          &lt;tei:name&gt;Not Real&lt;/tei:name&gt;
        &lt;/j:contributor&gt;
      })
      </code>
         <class href="common.t.incl.xml#Created"/>
         <xpath desc="profile created">doc-available("/db/data/user/not_a_real_contributors_profile.xml")</xpath>
         <xpath desc="profile mode is correct">sm:get-permissions(xs:anyURI("/db/data/user/not_a_real_contributors_profile.xml"))/*/(
        @owner="testuser" and @group="everyone" and @mode="rw-rw-r--"
      )</xpath>
      </test>
      <test>
         <task>Edit a non-user profile</task>
         <code>
      user:put("notauser", document {
        &lt;j:contributor&gt;
          &lt;tei:idno&gt;notauser&lt;/tei:idno&gt;
          &lt;tei:name&gt;Not A User&lt;/tei:name&gt;
        &lt;/j:contributor&gt;
      })
      </code>
         <class href="common.t.incl.xml#NoData"/>
         <xpath desc="profile edited">doc("/db/data/user/notauser.xml")/j:contributor/tei:name="Not A User"</xpath>
         <xpath desc="profile mode is correct">sm:get-permissions(xs:anyURI("/db/data/user/notauser.xml"))/*/(
        @owner="testuser" and @group="everyone" and @mode="rw-rw-r--"
      )</xpath>
      </test>
  </TestSet>
  <TestSet>
      <testName>user:put() not authenticated</testName>
      <asUser/>
      <password/>
      <setup>
         <code>
      system:as-user("admin", $magic:password, (
      xmldb:store("/db/data/user","notauser.xml",
        &lt;j:contributor&gt;
          &lt;tei:idno&gt;notauser&lt;/tei:idno&gt;
        &lt;/j:contributor&gt;
      ),
      let $uri := xs:anyURI("/db/data/user/notauser.xml")
      return (
        sm:chmod($uri, "rw-rw-r--"),
        sm:chown($uri, "testuser"),
        sm:chgrp($uri, "everyone")
      )
      ))
      </code>
      </setup>
      <tearDown>
         <code>
      system:as-user("admin", $magic:password,
        xmldb:remove("/db/data/user", "notauser.xml")
      )
      </code>
      </tearDown>
      <test>
         <task>Edit a user profile</task>
         <code>
      user:put("testuser", document {
        &lt;j:contributor&gt;
          &lt;tei:idno&gt;testuser&lt;/tei:idno&gt;
          &lt;tei:name&gt;Test User&lt;/tei:name&gt;
        &lt;/j:contributor&gt;
      })
      </code>
         <class href="common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>Edit a non-user profile</task>
         <code>
      user:put("nonuser", document {
        &lt;j:contributor&gt;
          &lt;tei:idno&gt;nonuser&lt;/tei:idno&gt;
          &lt;tei:name&gt;Is Not A User&lt;/tei:name&gt;
        &lt;/j:contributor&gt;
      })
      </code>
         <class href="common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>Create a profile</task>
         <code>
      user:put("there_is_no_user_with_that_name", document {
        &lt;j:contributor&gt;
          &lt;tei:idno&gt;there_is_no_user_with_that_name&lt;/tei:idno&gt;
          &lt;tei:name&gt;Is Not A User&lt;/tei:name&gt;
        &lt;/j:contributor&gt;
      })
      </code>
         <class href="common.t.incl.xml#Unauthorized"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>user:delete(): authenticated</testName>
      <setup>
         <code>
      system:as-user("admin", $magic:password, (
        let $u := sm:create-account("testuser3", "testuser3", "everyone")
        let $s := xmldb:store("/db/data/user", "testuser3.xml",
          &lt;j:contributor&gt;
            &lt;tei:idno&gt;testuser3&lt;/tei:idno&gt;
          &lt;/j:contributor&gt;
          )
        let $uri := xs:anyURI("/db/data/user/testuser3.xml")
        let $ch := (
          sm:chown($uri, "testuser3"),
          sm:chgrp($uri, "testuser3"),
          sm:chmod($uri, "rw-r--r--")
        )
        return ()
      ))
      </code>
      </setup>
      <tearDown>
         <code>
      system:as-user("admin", $magic:password, (
        if (doc-available("/db/data/user/testuser3.xml"))
        then xmldb:remove("/db/data/user", "testuser3.xml")
        else (),
        try { 
          if (sm:group-exists("testuser3"))
          then sm:remove-group("testuser3")
          else ()
        } 
        catch * { () },
        if (sm:user-exists("testuser3"))
        then sm:remove-account("testuser3")
        else ()
      ))
      </code>
      </tearDown>
      <test>
         <task>Delete your own profile</task>
         <code>
      system:as-user("testuser3","testuser3", (
        user:delete("testuser3")
      ))
      </code>
         <class href="common.t.incl.xml#NoData"/>
         <xpath desc="user removed">not(sm:user-exists("testuser3"))</xpath>
         <xpath desc="group removed">not(sm:list-groups()="testuser3")</xpath>
         <xpath desc="profile removed">not(doc-available("/db/data/user/testuser3.xml"))</xpath>
      </test>
      <test>
         <task>Delete another user's profile</task>
         <code>
      system:as-user("testuser","testuser", (
        user:delete("testuser3")
      ))
      </code>
         <class href="common.t.incl.xml#Forbidden"/>
      </test>
      <test>
         <task>Delete a non-existent profile</task>
         <code>
      system:as-user("testuser","testuser", (
        user:delete("doesnotexist")
      ))
      </code>
         <class href="common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Delete a non-user profile</task>
         <code>
      system:as-user("testuser","testuser", (
        user:delete("notauser")
      ))
      </code>
         <xpath desc="profile removed">not(doc-available("/db/data/user/notauser.xml"))</xpath>      
      </test>
  </TestSet>
  <TestSet>
      <testName>user:delete(): authenticated and an external reference exists</testName>
      <setup>
         <copy source="/db/apps/opensiddur-tests/tests/api/user" name="Reference.xml" 
            destination="/db/data/original"/>
         <code>
      system:as-user("admin", $magic:password, (
        let $u := sm:create-account("testuser3", "testuser3", "everyone")
        let $s := xmldb:store("/db/data/user", "testuser3.xml",
          &lt;j:contributor&gt;
            &lt;tei:idno&gt;testuser3&lt;/tei:idno&gt;
          &lt;/j:contributor&gt;
          )
        let $uri := xs:anyURI("/db/data/user/testuser3.xml")
        let $doc-uri := xs:anyURI("/db/data/original/Reference.xml")
        let $ch := (
          sm:chown($uri, "testuser3"),
          sm:chgrp($uri, "testuser3"),
          sm:chmod($uri, "rw-r--r--"),
          sm:chown($doc-uri, "testuser3"),
          sm:chgrp($doc-uri, "testuser3"),
          sm:chmod($doc-uri, "rw-rw-r--"),
          ridx:reindex(doc("/db/data/original/Reference.xml"))
        )
        return ()
      ))
      </code>
      </setup>
      <tearDown>
         <remove-document collection="/db/data/original" name="Reference.xml"/>
         <code>
      system:as-user("admin", $magic:password, (
        if (doc-available("/db/data/user/testuser3.xml"))
        then xmldb:remove("/db/data/user", "testuser3.xml")
        else (),
        try { 
          if (sm:group-exists("testuser3"))
          then sm:remove-group("testuser3")
          else ()
        } 
        catch * { () },
        if (sm:user-exists("testuser3"))
        then sm:remove-account("testuser3")
        else ()
      ))
      </code>
      </tearDown>
      <test>
         <task>Delete your own profile</task>
         <code>
      system:as-user("testuser3","testuser3", (
        user:delete("testuser3")
      ))
      </code>
         <xpath desc="status code is 200">self::rest:response/http:response/@status = 200</xpath>
         <xpath desc="returns an info element with the referenced document">ends-with(self::info//documents/document, "/api/data/original/Reference")</xpath>
         <xpath desc="user account removed">not(sm:user-exists("testuser3"))</xpath>
         <xpath desc="group removed">not(sm:list-groups()="testuser3")</xpath>
         <xpath desc="profile changed to anonymous profile">exists(doc("/db/data/user/testuser3.xml")/j:contributor[tei:idno="testuser3"][tei:name="Deleted user"])</xpath>
         <xpath desc="profile owned by admin">sm:get-permissions(xs:anyURI("/db/data/user/testuser3.xml"))/*/@owner="admin"</xpath>
         <xpath desc="profile owned by group everyone">sm:get-permissions(xs:anyURI("/db/data/user/testuser3.xml"))/*/@group="everyone"</xpath>
         <xpath desc="profile permissions are 664">sm:get-permissions(xs:anyURI("/db/data/user/testuser3.xml"))/*/@mode="rw-rw-r--"</xpath>
      </test>
      <test>
         <task>Delete another user's profile</task>
         <code>
      system:as-user("testuser","testuser", (
        user:delete("testuser3")
      ))
      </code>
         <class href="common.t.incl.xml#Forbidden"/>
      </test>
      <test>
         <task>Delete a non-existent profile</task>
         <code>
      system:as-user("testuser","testuser", (
        user:delete("doesnotexist")
      ))
      </code>
         <class href="common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Delete a non-user profile</task>
         <code>
      system:as-user("testuser","testuser", (
        user:delete("notauser")
      ))
      </code>
         <xpath desc="profile removed">not(doc-available("/db/data/user/notauser.xml"))</xpath>      
      </test>
  </TestSet>
  <TestSet>
      <testName>user:delete(): not authenticated</testName>
      <asUser/>
      <password/>
      <test>
         <task>Delete a user profile</task>
         <code>
      user:delete("testuser")
      </code>
         <class href="common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>Delete a non-user profile</task>
         <code>
      user:delete("notauser")
      </code>
         <class href="common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>Delete a non-existent profile</task>
         <code>
      user:delete("doesnotexist")
      </code>
         <class href="common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
</TestSuite>

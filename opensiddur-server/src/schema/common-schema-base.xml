<?xml version="1.0" encoding="UTF-8"?>
<!-- 
Base common schema.

This file is intended to be XInclude-d in the JLPTEI-based
schemas, not as an independent unit
 -->
<specGrp 
  xml:id="common-specs-base"
  xmlns="http://www.tei-c.org/ns/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xml:lang="en">
  <elementSpec ident="title" mode="change" module="core">
    <attList>
      <attDef ident="level" mode="delete"/>
    </attList>
  </elementSpec>
  <elementSpec ident="TEI" mode="change" module="textstructure">
    <attList>
      <attDef ident="version" mode="delete"/>
      <attDef ident="xml:lang" mode="change" usage="req">
        <desc>indicates the default language of the text in the document. Required because it determines how the document will be indexed in the database. &#13;
        </desc>
        <datatype minOccurs="1" maxOccurs="1">
          <rng:text xmlns:rng="http://relaxng.org/ns/structure/1.0"/>
        </datatype>
      </attDef>
    </attList>
    <constraintSpec ident="TEI-j-1" scheme="isoschematron" mode="add">
      <constraint>
        <sch:ns prefix="j" uri="http://jewishliturgy.org/ns/jlptei/1.0"/>
      </constraint>  
    </constraintSpec>
  </elementSpec>
  <elementSpec ident="anchor" mode="change" module="linking">
    <attList>
      <attDef ident="type" mode="change" usage="opt">
        <desc>Identifies the type of the anchor, and how it should be treated with respect to the
          pointers that point to it for the purposes of validity.</desc>
        <datatype>
          <dataRef key="teidata.enumerated"/>
        </datatype>
        <defaultVal>internal</defaultVal>
        <valList type="closed">
          <valItem ident="canonical"><gloss>Anchor is canonical. Its id cannot be removed from the document if externally referenced.
            It can be referenced by more than one pointer.</gloss></valItem>
          <valItem ident="internal"><gloss>Anchor is internal. It cannot be externally referenced. Its id may be removed from the document.</gloss></valItem>
          <valItem ident="external"><gloss>Anchor is external. Its id cannot be removed from the document if externally referenced. It may only
          be referenced by a single pointer (the single-purpose rule)</gloss></valItem>
        </valList>
      </attDef>
    </attList>
  </elementSpec>
  <elementSpec ident="ptr" mode="change" module="core">
    <!-- TODO: need an additional constraint where we test if all pointer targets exist -->
    <constraintSpec scheme="isoschematron" ident="ptr-j-1">
      <desc>Test that internal #range pointers point to a reasonable range</desc>
      <constraint>
        <sch:assert
          test="
          @xml:base or not(contains(@target, '#range')) or 
          (
          every $result in (
            for 
              $token in tokenize(@target, '\s+')[starts-with(., '#range(')],
              $lptr in substring-after(substring-before($token, ','), '('),
              $rptr in substring-before(substring-after($token, ','), ')')
            return 
              exists(/id($lptr)) and
              exists(/id($rptr)) and
              /id($lptr) &lt;&lt; /id($rptr)
          ) satisfies $result
          )
            ">
          In a #range(lptr,rptr) XPath expression, the left pointer must precede the right pointer.  
        </sch:assert>
      </constraint>
    </constraintSpec>
    <constraintSpec scheme="isoschematron" ident="ptr-j-2">
      <desc>Test that internal shorthand pointers point to an existing target</desc>
      <constraint>
        <sch:assert
          test="
          @xml:base or (
          every $ptr-result in (
            for 
              $token in tokenize(@target, '\s+')
                [not(starts-with(., '#range('))]
                [starts-with(.,'#')],
              $ptr in substring-after($token, '#')
            return 
              exists(/id($ptr))
          ) satisfies $ptr-result
          )
            ">
          In a local shorthand pointer, the target node must exist.  
        </sch:assert>
      </constraint>
    </constraintSpec>
  </elementSpec>
  <elementSpec ident="sourceDesc" mode="change" module="header">
    <attList>
      <attDef ident="default" mode="delete"/>
    </attList>
    <content>
      <rng:oneOrMore xmlns:rng="http://relaxng.org/ns/structure/1.0">
        <rng:ref name="bibl"/>
      </rng:oneOrMore>
    </content>
  </elementSpec>
  <elementSpec ident="ab" module="linking" mode="change">
    <classes mode="replace">
      <memberOf key="model.pLike"/>
      <memberOf key="att.global"/>
      <memberOf key="att.typed"/>
      <memberOf key="att.declaring" mode="delete"/>
    </classes>
    <attList>
      <attDef ident="part" mode="delete"/>
    </attList>
  </elementSpec>
  <elementSpec ident="availability" module="header" mode="change">
    <attList>
      <attDef ident="status" mode="delete"/>
    </attList>
  </elementSpec>
  <elementSpec ident="p" module="core" mode="change">
    <classes mode="replace">
      <memberOf key="model.pLike"/>
      <memberOf key="att.declaring"/>
      <memberOf key="att.global"/>
      <memberOf key="model.availabilityPart" mode="delete"/>
    </classes>
  </elementSpec>
  <elementSpec ident="licence" module="header" mode="change">
    <attList>
      <attDef ident="target" mode="change" usage="rwa">
        <desc>Pointer to the license that applies to the text, which must be in the list of licenses approved for use in the project.</desc>
        <datatype minOccurs="1" maxOccurs="1">
          <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="data.enumerated"/>
        </datatype>
        <valList type="closed" mode="add">
          <valItem ident="http://www.creativecommons.org/publicdomain/zero/1.0">
            <gloss>Creative Commons Zero (Public Domain Dedication)</gloss>
          </valItem>
          <valItem ident="http://creativecommons.org/publicdomain/mark/1.0">
            <gloss>Creative Commons Public Domain Mark (for works known to be in the public domain and without post-PD modification)</gloss>
          </valItem>
          <valItem ident="http://www.creativecommons.org/licenses/by/3.0">
            <gloss>Creative Commons Attribution 3.0 Unported</gloss>
          </valItem>
          <valItem ident="http://www.creativecommons.org/licenses/by/4.0">
            <gloss>Creative Commons Attribution 4.0 International</gloss>
          </valItem>
          <valItem ident="http://www.creativecommons.org/licenses/by-sa/3.0">
            <gloss>Creative Commons Attribution-ShareAlike 3.0 Unported</gloss>
          </valItem>
          <valItem ident="http://www.creativecommons.org/licenses/by-sa/4.0">
            <gloss>Creative Commons Attribution-ShareAlike 4.0 International</gloss>
          </valItem>
        </valList>        
      </attDef>
    </attList>
  </elementSpec>
  <elementSpec ident="link" module="linking" mode="change">
    <classes mode="replace">
      <memberOf key="model.global"/>
      <memberOf key="model.global.meta"/>
      <memberOf key="att.global"/>
      <memberOf key="att.pointing"/>
      <memberOf key="att.typed"/>
    </classes>
    <!-- TODO: the constraints on link and ptr/@target are the same -->
    <constraintSpec scheme="isoschematron" ident="link-j-1">
      <desc>Test that internal #range pointers point to a reasonable range</desc>
      <constraint>
        <sch:assert
          test="
          @xml:base or not(contains(@target, '#range')) or 
          (
          every $result in (
            for 
              $token in tokenize(@target, '\s+')[starts-with(., '#range(')],
              $lptr in substring-after(substring-before($token, ','), '('),
              $rptr in substring-before(substring-after($token, ','), ')')
            return 
              exists(/id($lptr)) and
              exists(/id($rptr)) and
              /id($lptr) &lt;&lt; /id($rptr)
          ) satisfies $result
          )
            ">
          In a #range(lptr,rptr) XPath expression, the left pointer must precede the right pointer.  
        </sch:assert>
      </constraint>
    </constraintSpec>
    <constraintSpec scheme="isoschematron" ident="link-j-2">
      <desc>Test that internal shorthand pointers point to an existing target</desc>
      <constraint>
        <sch:assert
          test="
          @xml:base or (
          every $ptr-result in (
            for 
              $token in tokenize(@target, '\s+')
                [not(starts-with(., '#range('))]
                [starts-with(.,'#')],
              $ptr in substring-after($token, '#')
            return 
              exists(/id($ptr))
          ) satisfies $ptr-result
          )
            ">
          In a local shorthand pointer, the target node must exist.  
        </sch:assert>
      </constraint>
    </constraintSpec>
    <attList>
      <attDef ident="targets" mode="delete"/>
    </attList>
  </elementSpec>
  <elementSpec ident="linkGrp" module="linking" mode="change">
    <classes mode="replace">
      <memberOf key="model.global"/>
      <memberOf key="model.global.meta"/>
      <memberOf key="att.global"/>
      <!--memberOf key="att.pointing"/-->
      <memberOf key="att.pointing.group"/>
    </classes>
  </elementSpec>
  <elementSpec ident="resp" module="core" mode="change">
    <!-- require @key in resp, remove @ref -->
    <attList>
      <attDef ident="ref" mode="delete"/>
      <attDef ident="key" mode="change" usage="req">
        <desc>Responsibility type, indicated using one of the allowed MARC relator codes, as defined at 
        http://www.loc.gov/marc/relators/relaterm.html. The valid codes are:
          ann (annotator), aut (author), edt (editor), fac (facsimilist, scanner?), fnd (funder), mrk (markup editor), pfr (proofreader), spn (sponsor),
            trl (translator), and trc (transcriber)</desc>
        <datatype minOccurs="1" maxOccurs="1">
          <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="data.enumerated"/>
        </datatype>
        <valList type="closed" mode="add">
          <valItem ident="ann"/>
          <valItem ident="aut"/>
          <valItem ident="edt"/>
          <valItem ident="fac"/>
          <valItem ident="fnd"/>
          <valItem ident="mrk"/>
          <valItem ident="pfr"/>
          <valItem ident="spn"/>
          <valItem ident="trl"/>
          <valItem ident="trc"/>
        </valList>        
      </attDef>
    </attList>
  </elementSpec>
  <elementSpec ident="respStmt" module="core" mode="change">
    <constraintSpec mode="add" scheme="isoschematron" ident="respStmt-j-1">
      <desc>Require @ref in the non-resp element to reference a contributor</desc>
      <constraint>
        <sch:assert test="exists(*[not(self::resp)]/@ref)">The name-like element in respStmt is required to reference a contributor using an @ref attribute</sch:assert>
      </constraint>
    </constraintSpec>
  </elementSpec>
  <elementSpec ident="revisionDesc" module="header" mode="change">
    <!-- remove list from revisionDesc -->
    <content>
      <rng:oneOrMore xmlns:rng="http://relaxng.org/ns/structure/1.0">
        <rng:ref name="change"/>
      </rng:oneOrMore>
    </content>
  </elementSpec>
  <elementSpec ident="teiHeader" module="header" mode="change">
    <attList>
      <attDef ident="type" mode="delete"/>
      <attDef ident="n" mode="delete"/>
      <attDef ident="rend" mode="delete"/>
      <attDef ident="rendition" mode="delete"/>
      <attDef ident="xml:space" mode="delete"/>
    </attList>
  </elementSpec>  


  <classSpec ident="att.global" mode="change" module="tei" type="atts">
    <attList>
      <attDef ident="xml:space" mode="delete"/>
      <attDef ident="rend" mode="delete"/>
      <attDef ident="rendition" mode="delete"/>
      <attDef ident="style" mode="delete"/>
    </attList>
  </classSpec>
  <classSpec ident="att.global.rendition" mode="delete" module="tei" type="atts"/>
  <classSpec ident="att.divLike" mode="change" module="tei" type="atts">
    <attList>
      <attDef ident="org" mode="delete"/>
      <attDef ident="sample" mode="delete"/>
    </attList>
  </classSpec>
  <!-- classSpec ident="att.canonical" mode="delete" module="tei" type="atts"/-->
  <classSpec ident="att.declaring" mode="delete" module="tei" type="atts"/>
  <classSpec ident="att.datcat" mode="delete" module="tei" type="atts"/>
  <classSpec ident="att.responsibility" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.damaged" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.breaking" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.transcriptional" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.datable.custom" module="namesdates" mode="delete" type="atts"/>
  <classSpec ident="att.datable.iso" module="namesdates" mode="delete" type="atts"/>
  <classSpec ident="att.datable" module="tei" mode="change" type="atts">
    <attList>
      <attDef ident="calendar" mode="delete"/>
      <attDef ident="period" mode="delete"/>
    </attList>
  </classSpec>
  <classSpec ident="att.datable.w3c" module="tei" mode="change" type="atts">
    <attList>
      <attDef ident="notBefore" mode="delete"/>
      <attDef ident="notAfter" mode="delete"/>
      <attDef ident="from" mode="delete"/>
      <attDef ident="to" mode="delete"/>
    </attList>
  </classSpec>
  <classSpec ident="att.declarable" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.dimensions" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.duration.iso" module="namesdates" mode="delete" type="atts"/>
  <classSpec ident="att.duration.w3c" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.editLike" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.enjamb" module="verse" mode="delete" type="atts"/>
  <classSpec ident="att.msExcerpt" module="msdescription" mode="delete" type="atts"/>
  <classSpec ident="att.global.change" module="transcr" mode="delete" type="atts"/>
  <!-- keeping @next, @prev -->
  <classSpec ident="att.global.linking" module="linking" mode="change" type="atts">
    <attList>
      <attDef ident="corresp" mode="delete"/>
      <attDef ident="synch" mode="delete"/>
      <attDef ident="sameAs" mode="delete"/>
      <attDef ident="copyOf" mode="delete"/>
      <attDef ident="exclude" mode="delete"/>
      <attDef ident="select" mode="delete"/>
    </attList>
  </classSpec>
  <classSpec ident="att.translatable" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.timed" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.textCritical" module="textcrit" mode="delete" type="atts"/>
  <classSpec ident="att.tableDecoration" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.spanning" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.sourced" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.sortable" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.segLike" module="tei" mode="change" type="atts">
    <attList>
      <attDef ident="function" mode="delete"/>
    </attList>
  </classSpec>
  <classSpec ident="att.interpLike" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.measurement" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.readFrom" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.rdgPart" module="textcrit" mode="delete" type="atts"/>
  <classSpec ident="att.ranging" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.naming" module="tei" mode="change" type="atts">
    <!-- used to keep att.canonical in name/orgName -->
    <attList mode="change">
      <attDef ident="role" mode="delete"/>
      <attDef ident="nymRef" mode="delete"/>
    </attList>
  </classSpec>
  <classSpec ident="att.placement" module="tei" mode="delete" type="atts"/>
  <classSpec ident="att.global.analytic" module="analysis" mode="delete" type="atts"/>
  <classSpec ident="att.global.facs" module="transcr" mode="delete" type="atts"/>
  <classSpec ident="att.pointing.group" module="tei" mode="change" type="atts">
    <attList>
      <!--attDef ident="domains" mode="delete"/-->
      <attDef ident="targFunc" mode="delete"/>
    </attList>
  </classSpec>
  <classSpec ident="att.written" module="tei" mode="delete" type="atts"/>
</specGrp>

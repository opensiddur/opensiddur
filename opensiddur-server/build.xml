<project name="opensiddur-server" default="dist" basedir=".">
	<description>
        Build file for opensiddur-server
    </description>
	<!-- set global properties for this build -->
	<dirname property="base.dir" file="${ant.file.opensiddur-server}"/>
    <property name="lib.dir" location="../lib"/>
    <property name="izpack" location="${lib.dir}/IzPack"/>
	<property name="src" location="${base.dir}/src"/>
    <property name="build" location="${base.dir}/build"/>
	<property name="dist"  location="${base.dir}/dist"/>

    <property name="roma" location="${lib.dir}/tei/Roma/roma2.sh"/>

    <property environment="env"/>

	<!-- set local properties for the build -->
	<property file="../local.build.properties"/>
    <!-- set global default properties for the build -->
    <property file="../build.properties"/>
	
    <macrodef name="generate-schema" 
        description="generate a schema from ODD source">
        <attribute name="input.file"/>
        <attribute name="temp.dir"/>
        <attribute name="output.dir"/>
        <sequential>
            <mkdir dir="@{temp.dir}"/>
            <exec executable="${roma}">
                <env key="PATH" value="${env.PATH}:${lib.dir}"/>
                <arg value="--xsl=${lib.dir}/tei/Stylesheets"/>
                <arg value="--localsource=${lib.dir}/tei/p5subset.xml"/>
                <arg value="--nodtd"/>
                <arg value="--noxsd"/>
                <arg value="--isoschematron"/>
                <!--<arg value="- -dochtml"/>-->
                <arg value="@{input.file}"/>
                <arg value="@{temp.dir}"/>
            </exec>
            <xslt
                classpath="${lib.dir}/saxonhe-9.2.1.5.jar"
                basedir="@{temp.dir}"
                destdir="@{temp.dir}"
                style="${lib.dir}/iso-schematron/iso_svrl_for_xslt2.xsl">
                <factory name="net.sf.saxon.TransformerFactoryImpl" />
                <mapper type="glob" from="*.isosch" to="*.xsl"/>
            </xslt>
            <copy todir="@{output.dir}">
                <fileset dir="@{temp.dir}">
                    <include name="*.rnc" />
                    <include name="*.xsl" />
                </fileset>
            </copy>
            <copy todir="@{output.dir}/doc">
                <fileset dir="@{temp.dir}">
                    <include name="*.html" />
                </fileset>
            </copy>
        </sequential>
    </macrodef>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		
		<uptodate property="schema.uptodate">
			<srcfiles dir="${src}/schema">
				<include name="*.xml"/>
				<exclude name="*common*.xml"/>
			</srcfiles>
			<mapper type="glob" from="*.xml" to="${build}/schema/*.xsl"/>
		</uptodate>
		<!-- make build dirs --> 
        <mkdir dir="${build}"/>
        <mkdir dir="${dist}"/>
	</target>

	<target name="dist" depends="init,xar"
		description="build everything"/>

    <target name="schema-dir" depends="init">
        <mkdir dir="${build}/schema"/>
        <mkdir dir="${build}/temp"/>
		<!-- pre-generated rnc -->
        <copy todir="${build}/schema">
            <fileset dir="${src}/schema">
                <include name="*.rnc"/>
            </fileset>
        </copy>
    </target>

    <target name="pregen-schema" depends="schema-dir">
		<!-- pre-generated iso schematron -->
    	<xslt
            classpath="${lib.dir}/saxonhe-9.2.1.5.jar"
            basedir="${src}/schema"
            destdir="${build}/schema"
            style="${lib.dir}/iso-schematron/iso_svrl_for_xslt2.xsl">
            <factory name="net.sf.saxon.TransformerFactoryImpl" />
            <mapper type="glob" from="*.isosch" to="*.xsl"/>
        </xslt>
    </target>
    <target name="jlptei-schema" depends="schema-dir" unless="schema.uptodate">
		<generate-schema 
            input.file="${src}/schema/jlptei.xml" 
            output.dir="${build}/schema" 
            temp.dir="${build}/temp" />
    </target>
    <target name="linkage-schema" depends="schema-dir" unless="schema.uptodate">
        <generate-schema 
            input.file="${src}/schema/linkage.xml" 
            output.dir="${build}/schema" 
            temp.dir="${build}/temp" />
    </target>
    <target name="contributor-schema" depends="schema-dir" unless="schema.uptodate">
        <generate-schema 
            input.file="${src}/schema/contributor.xml" 
            output.dir="${build}/schema" 
            temp.dir="${build}/temp" />
    </target>
    <target name="bibliography-schema" depends="schema-dir" unless="schema.uptodate">
        <generate-schema 
            input.file="${src}/schema/bibliography.xml" 
            output.dir="${build}/schema" 
            temp.dir="${build}/temp" />
    </target>
    <target name="annotation-schema" depends="schema-dir" unless="schema.uptodate">
        <generate-schema 
            input.file="${src}/schema/annotation.xml" 
            output.dir="${build}/schema" 
            temp.dir="${build}/temp" />
    </target>
    <target name="conditional-schema" depends="schema-dir" unless="schema.uptodate">
        <generate-schema 
            input.file="${src}/schema/conditional.xml" 
            output.dir="${build}/schema" 
            temp.dir="${build}/temp" />
    </target>
    <target name="dictionary-schema" depends="schema-dir" unless="schema.uptodate">
        <generate-schema 
            input.file="${src}/schema/dictionary.xml" 
            output.dir="${build}/schema" 
            temp.dir="${build}/temp" />
    </target>
    <target name="style-schema" depends="schema-dir" unless="schema.uptodate">
        <generate-schema 
            input.file="${src}/schema/style.xml" 
            output.dir="${build}/schema" 
            temp.dir="${build}/temp" />
    </target>
	<target name="schema" 
		depends="init,schema-dir,pregen-schema,jlptei-schema,linkage-schema,contributor-schema,bibliography-schema,annotation-schema,conditional-schema,dictionary-schema,style-schema"
		description="generate XML schemas"
		unless="schema.uptodate">
        <delete dir="${build}/temp"/>
	</target>
	
    <target name="templates"
        depends="init"
        description="copy templates to final versions">
        <copy todir="${build}">
            <fileset dir="${src}"/>
            <mapper type="regexp" from="^(.+)\.tmpl\.(.+)$$" to="\1\.\2"/>
        </copy>
    </target>

    <target name="magic"
        depends="init,templates"
        description="Write magic.xqm">
        <replace
            file="${build}/magic/magic.xqm"
            token="ADMINPASSWORD"
            value="${adminpassword}">
        </replace> 
    </target>

	<target name="xar" 
		depends="schema,templates,magic"
        description="generate the xar distribution" >
        <copy todir="${build}">
			<fileset dir="${src}">
				<include name="**/*.html"/>
				<include name="**/*.css"/>
				<include name="**/*.js"/>
				<include name="**/*.xml"/>
				<include name="**/*.xq?"/>
				<include name="**/*.xconf"/>
				<include name="**/*.rnc"/>
				<include name="**/*.svg"/>
				<include name="**/*.xsl"/>
				<include name="img/*"/>
				<exclude name="schema/*"/>
				<exclude name="**/*.tmpl.*" />
				<exclude name="**/*.xar" />
				<exclude name="build.xml"/>
			</fileset>
        </copy>
		<zip 
            destfile="${dist}/opensiddur-server.xar" 
            basedir="${build}">
		</zip>
	</target>

	<target name="clean"
        description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
	    <delete dir="${build}"/>
    	<delete dir="${dist}"/>
	</target>
</project>


<project name="opensiddur" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>
        Build file for opensiddur
    </description>
    <property name="lib.dir" location="lib"/>
    <property name="exist.version" value="4.8.0"/>
    <property name="ivy.version" value="2.4.0"/>
	<property name="installer" location="${lib.dir}/exist/installer/eXist-db-setup-${exist.version}-opensiddur.jar"/>
	<property name="build" location="build"/>
    <property name="dist" location="dist"/>
    <property name="deps.dir" location="dependencies"/>

    <property name="builder.image.tag" value="opensiddur-builder:latest"/>

    <property name="docker.image.tag" value="opensiddur:latest"/>
    <property name="docker.image.name" value="opensiddur-container"/>
    <!-- TCP port to keep open for the docker image -->
    <property name="docker.image.port" value="5000"/>

    <property file="local.build.properties"/>
    <property file="build.properties"/>

    <property name="wrapper.conf" location="${installdir}/tools/yajsw/conf/wrapper.conf"/>

    <!-- if we are running as root, the build image has to be the root build image -->
    <condition property="build.docker.image" value="build-root" else="build-user">
        <equals arg1="${user.name}" arg2="root"/>
    </condition>

    <!--	
	<path id="classpath.core">
	    <fileset dir="${lib.dir}/exist/lib/core">
	        <include name="*.jar"/>
	    </fileset>
	    <pathelement path="${lib.dir}/exist/exist.jar"/>
	    <pathelement path="${lib.dir}/exist/exist-optional.jar"/>
	</path>
	<typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
	    <classpath refid="classpath.core"/>
	</typedef>
	-->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- do git submodule init, update -->
		<exec executable="git">
		    <arg value="submodule"/>
		    <arg value="init"/>
		</exec>
		<exec executable="git">
		    <arg value="submodule"/>
		    <arg value="update"/>
            <arg value="--remote"/>
		</exec>

        <exec executable="id" outputproperty="user.id">
            <arg value="-u"/>
        </exec>
        <exec executable="id" outputproperty="group.id">
            <arg value="-g"/>
        </exec>
       
		<uptodate property="exist.uptodate" targetfile="${installer}">
			<srcfiles dir="${lib.dir}/exist">
				<include name="**/*.java"/>
				<include name="**/*.xml"/>
				<include name="**/*.tmpl"/>
				<exclude name="${installer}"/>
			</srcfiles>
		</uptodate>
		<!-- make build dirs -->
		<mkdir dir="${build}"/>
        <mkdir dir="${dist}"/>
	</target>

    <!-- this little bit of code downloads ivy. Thanks to https://superuser.com/questions/697800/how-to-get-apache-ant-to-recognize-ivy -->
    <target name="bootstrap" description="Used to install the ivy task jar">
        <mkdir dir="${user.home}/.ant/lib"/>
        <get dest="${user.home}/.ant/lib/ivy.jar" src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"/>
    </target>


    <target name="exist" depends="build-exist,autodeploy">
    </target>

    <target name="builder-docker" depends="init">
        <echo>build docker image: ${build.docker.image}</echo>
        <exec executable="docker">
            <arg value="build"/>
            <arg value="--target"/>
            <arg value="${build.docker.image}"/>
            <arg value="-f"/>
            <arg value="build.Dockerfile"/>
            <arg value="-t"/>
            <arg value="${builder.image.tag}"/>
            <arg value="--build-arg"/>
            <arg value="USER_ID=${user.id}"/>
            <arg value="--build-arg"/>
            <arg value="GROUP_ID=${group.id}"/>
            <arg value="."/>
        </exec>
    </target>

	<target name="build-exist" depends="init,builder-docker" unless="exist.uptodate">
		<exec executable="docker">
            <arg value="run"/>
            <arg value="-v"/>
            <arg value="${lib.dir}:/usr/local/src"/>
            <arg value="-w"/>
            <arg value="/usr/local/src/exist"/>
            <arg value="${builder.image.tag}"/>
            <arg value="./build.sh"/>
            <arg value="installer"/>
            <arg value="-Dizpack.dir=/usr/local/src/IzPack"/>
            <arg value="-Dinclude.module.scheduler=true"/>
            <arg value="-Dinclude.feature.security.oauth=false"/>
            <arg value="-Dinclude.feature.security.openid=false"/>
        </exec>
	</target>
	
	<target name="install-exist" depends="init,build-exist"
		xmlns:xdb="http://exist-db.org/ant">
		<echo file="${build}/install-options.xml" append="false">
INSTALL_PATH=${installdir}
dataDir=webapp/WEB-INF/data
divider=
space=
MAX_MEMORY=${max.memory}
cacheSize=${cache.size}
		</echo>
		<exec
			executable="java"
			dir=".">
			<arg value="-jar"/>
			<arg value="${installer}"/>
			<arg value="-console"/>
			<arg value="-options"/>
			<arg file="${build}/install-options.xml"/>
		</exec>
		<delete file="${build}/install-options.xml"/>
		<!-- default password has been changed to 'password' -->
        <exec
            executable="${installdir}/bin/client.sh"
            dir="${installdir}"
            >
            <arg value="-qls"/>
            <arg value="-u"/>
            <arg value="admin"/>
            <arg value="-P"/>
            <arg value="password"/>
            <arg value="-x"/>
            <arg value="sm:passwd('admin','${adminpassword}')"/>
        </exec>
        <!-- copy the icu4j library from lib -->
        <copy todir="${installdir}/lib/user">
            <fileset dir="${lib.dir}">
            	<include name="icu4j-*"/>
            </fileset>
        </copy>
        <!-- edit conf.xml -->
        <xslt in="${installdir}/conf.xml"
             out="${installdir}/conf.out.xml"
             style="setup/setup-conf-xml.xsl"
             processor="trax"
             classpath="${lib.dir}/saxonhe-9.2.1.5.jar">
             <factory name="net.sf.saxon.TransformerFactoryImpl"/>
        </xslt>
        <move file="${installdir}/conf.out.xml" tofile="${installdir}/conf.xml"/>

        <!-- edit web.xml -->
        <xslt in="${installdir}/webapp/WEB-INF/web.xml"
              out="${installdir}/webapp/WEB-INF/web.out.xml"
              style="setup/setup-web-xml.xsl"
              processor="trax"
              classpath="${lib.dir}/saxonhe-9.2.1.5.jar">
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
        </xslt>
        <move file="${installdir}/webapp/WEB-INF/web.out.xml" tofile="${installdir}/webapp/WEB-INF/web.xml"/>

        <!-- edit wrapper.conf -->
        <echo file="${wrapper.conf}" append="true">wrapper.java.additional.stack=-Xss${stack.memory}m</echo>
    </target>
	
	<target name="exist-clean">
		<exec 
			executable="./build.sh" 
			dir="${lib.dir}/exist">
			<arg value="clean"/>
		</exec>
	</target>

    <target name="fix-restxq">
        <!-- BUG workaround: copy the restxq registry -->
        <copy todir="${installdir}/webapp/WEB-INF/data" overwrite="true">
            <fileset dir="${lib.dir}">
                <include name="restxq.registry"/>
            </fileset>
        </copy>
    </target>

    <target name="install-hebmorph"
        depends="dist"
        description="install the hebmorph files into eXist">
        <copy todir="${installdir}/extensions/indexes/lucene/lib" flatten="true">
            <fileset dir="${lib.dir}/hebmorph-exist/java/target">
                <include name="hebmorph-lucene.jar"/>
            </fileset>
        </copy>
        <copy todir="${installdir}/extensions/indexes/lucene/lib">
            <fileset dir="${lib.dir}/hebmorph-exist">
                <include name="hspell-data-files/*"/>
            </fileset>
        </copy>
        <symlink link="${installdir}/tools/yajsw/target/classes/hspell-data-files"
                 resource="${installdir}/extensions/indexes/lucene/lib/hspell-data-files"/>
    </target>

    <!-- sources and tests needs to be autodeployed separately; tests will generally be done using ant test -->
    <target name="autodeploy-sources" depends="dist">
        <copy todir="${installdir}/autodeploy">
            <fileset dir="${dist}">
                <include name="opensiddur-sources.xar"/>
            </fileset>
        </copy>
    </target>

    <target name="autoupgrade"
        depends="dist,install-hebmorph"
        description="install or upgrade Open Siddur packages without touching eXist">
        <ant dir="${lib.dir}/exist" 
            antfile="${lib.dir}/exist/build/scripts/installer.xml"
            target="download-xars">
            <!-- eXist-supplied apps to be installed -->
            <property name="apps" value="shared,dashboard,eXide,exist-documentation,fundocs,monex,usermanager" />
        </ant>
		<copy todir="${installdir}/autodeploy">
			<fileset dir="${dist}">
				<include name="opensiddur-server.xar"/>
                <include name="opensiddur-demos.xar"/>
			</fileset>
            <fileset dir="${lib.dir}/exist/installer/apps">
                <include name="dashboard*.xar"/>
                <include name="eXide*.xar"/>
                <include name="*shared-resources*.xar"/>
                <include name="monex*.xar"/>
                <include name="fundocs*.xar"/>
                <include name="exist-documentation*.xar"/>
                <include name="usermanager*.xar"/>
            </fileset>
		</copy>
    </target>

	<target name="autodeploy-with-restore" 
		depends="install-exist,restore,autoupgrade"
		description="set up eXist, restore from backup, and built xars for autodeployment">
	</target>
    	
	<target name="autodeploy" 
		depends="install-exist,autoupgrade"
		description="set up eXist and built xars for autodeployment">
	</target>
    
	<target name="dist" depends="init,builder-docker"
		description="build everything">
		<subant target="dist" inheritAll="false">
			<fileset dir=".">
				<include name="opensiddur-server/build.xml"/>
                <include name="opensiddur-demos/build.xml"/>
				<exclude name="build.xml"/>
			</fileset>
		</subant>
        <exec executable="docker">
            <arg value="run"/>
            <arg value="-v"/>
            <arg value="${lib.dir}:/usr/local/src"/>
            <arg value="-w"/>
            <arg value="/usr/local/src/hebmorph-exist"/>
            <arg value="${builder.image.tag}"/>
            <arg value="mvn"/>
            <arg value="-Dmaven.test.skip=true"/>
            <arg value="package"/>
        </exec>
        <copy todir="${dist}" flatten="true">
            <fileset dir=".">
            	<include name="lib/*/dist/*.xar"/>
                <include name="*/dist/*.xar"/>
            </fileset>
        </copy>
    </target>

    <target name="docker-build" depends="build-exist,dist"
            description="build a docker image">
        <exec executable="docker">
            <arg value="build"/>
            <arg value="-t"/>
            <arg value="${docker.image.tag}"/>
            <arg value="."/>
        </exec>
    </target>

    <target name="docker-run" depends="docker-build">
        <exec executable="docker">
            <arg value="run"/>
            <arg value="-p"/>
            <arg value="127.0.0.1:${docker.image.port}:8080/tcp"/>
            <arg value="--name"/>
            <arg value="${docker.image.name}"/>
            <arg value="-d"/>
            <arg value="${docker.image.tag}"/>
        </exec>
    </target>

    <target name="docker-stop">
        <exec executable="docker">
            <arg value="stop"/>
            <arg value="${docker.image.name}"/>
        </exec>
        <exec executable="docker">
            <arg value="container"/>
            <arg value="rm"/>
            <arg value="${docker.image.name}"/>
        </exec>
    </target>

    <target name="retrieve-dependencies"
        depends="bootstrap"
        description="Retrieve dependencies with Apache IVY">
        <ivy:retrieve pattern="${deps.dir}/[artifact].[ext]" type="jar" />
    </target>

	<target name="clean"
        description="clean up Open Siddur code" 
		>
		<subant target="clean" inheritAll="false">
			<fileset dir=".">
				<include name="*/build.xml"/>
				<exclude name="build.xml"/>
			</fileset>
		</subant>

		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}"/>
		<delete dir="${dist}"/>

        <!-- delete Ivy dependencies -->
        <delete dir="${deps.dir}"/>
	</target>
	
	<target name="lib-clean"
		depends="clean,exist-clean"
		description="clean open siddur code and library code">
	</target>

    <target name="uninstall">
        <echo level="warning">Warning: About to delete everything in ${installdir}. If this not what you want to do, press ^C now! You have 5 seconds...</echo>
        <sleep seconds="5"/>
        <delete dir="${installdir}"/>
    </target>

    <target name="test"
        description="Run tests"
        depends="docker-run">
        <exec
                executable="python3"
                failonerror="true">
            <arg value="python/wait_for_up.py"/>
        </exec>
        <exec
                executable="mvn"
                failonerror="true"
                dir="opensiddur-extensions"
        >
            <arg value="test"/>
        </exec>
    </target>

    <target name="backup"
        description="back up an existing database into $backup.directory">
        <property environment="env"/>
        <delete dir="${backup.directory}"/>
        <mkdir dir="${backup.directory}"/>
        <chmod dir="${backup.directory}" perm="777"/>
        <exec
            executable="${installdir}/bin/client.sh">
            <arg value="-qs"/>
            <arg value="-u"/>
            <arg value="admin"/>
            <arg value="-P"/>
            <arg value="${adminpassword}"/>
            <arg value="-x"/>
            <arg value="system:export('${backup.directory}', false(), false())"/>
            <arg value="-ouri=xmldb:exist://localhost:8080/exist/xmlrpc"/>
            <!-- DEBUG_OPTS seems to be the only way to force options after java.endorsed.dirs -->
            <env key="DEBUG_OPTS" value="-Djava.endorsed.dirs=${installdir}/lib/optional:${installdir}/lib/endorsed"/>
        </exec>
    </target>
    <target name="process-backup-for-upgrade"
            description="edit the backup in $backup.directory, removing things that we do not want restored">
        <tempfile property="exist.backup.remove.file" destDir="${java.io.tmpdir}" deleteonexit="true"/>
        <echo file="${exist.backup.remove.file}">
            ^/db/apps
            ^/db/cache
            ^/db/refindex
            ^/db/system/config
            ^/db/system/security/exist/(accounts|groups)/removed
            ^/db/system/security/exist/accounts/(admin|guest|testuser|testuser.)\.xml$
            ^/db/system/security/exist/groups/(dba|testuser|testuser2|grouptests|grouptests.)\.xml$
            ^/db/data/user/(testuser|testuser.)\.xml$
            ^/db/data/tests
        </echo>
        <dirset dir="${backup.directory}" includes="full*" id="full.backup.directories" />
        <pathconvert pathsep="" property="backup.full.directory" refid="full.backup.directories"/>

        <exec input="${exist.backup.remove.file}"
              executable="python3">
            <arg value="python/removeFromBackup.py"/>
            <arg value="-s"/>
            <arg value="-v"/>
            <arg value="${backup.full.directory}/db"/>
        </exec>
        <tar destfile="${backup.directory}/exist-backup.tar.gz" basedir="${backup.full.directory}"
             compression="gzip" longfile="gnu"/>
    </target>
    <target name="backup-for-upgrade"
        depends="backup,process-backup-for-upgrade"
        description="make a backup, then process what should be restored">
    </target>
    <target name="restore"
        description="restore the database from (modified) backup, rerun refindex update">
        <property environment="env"/>
        <exec
            executable="${installdir}/bin/backup.sh">
            <arg value="-u"/>
            <arg value="admin"/>
            <arg value="-p"/>
            <arg value="${adminpassword}"/>
            <arg value="-r"/>
            <arg value="${backup.directory}"/>
            <arg value="-ouri=xmldb:exist://"/>
            <!-- DEBUG_OPTS seems to be the only way to force options after java.endorsed.dirs -->
            <env key="DEBUG_OPTS" value="-Dexist.autodeploy=off"/>
            <!-- -Djava.endorsed.dirs=${installdir}/lib/optional:${installdir}/lib/endorsed"/>-->
        </exec>
        <!-- schema update -->    
        <!--
        <exec
            executable="${installdir}/bin/client.sh"
            dir="${installdir}"
            inputstring="xquery version '3.0';
            import module namespace upg='http://jewishliturgy.org/modules/upgrade'
                at 'xmldb:exist:///apps/opensiddur-server/modules/upgrade.xqm';
            upg:all-schema-changes()
            ">
            <arg value="-qls"/>
            <arg value="-u"/>
            <arg value="admin"/>
            <arg value="-P"/>
            <arg value="${adminpassword}"/>
            <arg value="-x"/>
            <arg value="-Dexist.autodeploy=off"/>
            <env key="DEBUG_OPTS" value="-Djava.endorsed.dirs=${installdir}/lib/optional:${installdir}/lib/endorsed:${installdir}/lib/user"/>
        </exec>
        -->
        <!-- reindex --> 
        <!--   
        <exec
            executable="${installdir}/bin/client.sh"
            dir="${installdir}"
            inputstring="xquery version '3.0';
            import module namespace ridx='http://jewishliturgy.org/modules/refindex'
            at 'xmldb:exist:///db/apps/opensiddur-server/modules/refindex.xqm'; 
            ridx:reindex(collection('/db/data'))"
            >
            <arg value="-qls"/>
            <arg value="-u"/>
            <arg value="admin"/>
            <arg value="-P"/>
            <arg value="${adminpassword}"/>
            <arg value="-x"/>
            <env key="DEBUG_OPTS" value="-Djava.endorsed.dirs=${installdir}/lib/optional:${installdir}/lib/endorsed:${installdir}/lib/user"/>
        </exec>
        -->
    </target>
</project>

